AWSTemplateFormatVersion: '2010-09-09'
Description: Minimal template to associate a WAF Web ACL with an ALB.

Parameters:
  LoadBalancerARN:      
    Type: String
    Description: The ARN of the Application Load Balancer

  BlockedRequestAlarmThreshold:
    Type: Number
    Default: 20
    Description: Threshold for the cloud alarm to trigger an action for blocked request.

  AllowedRequestAlarmThreshold:
    Type: Number
    Default: 200
    Description: Threshold for the cloud alarm to trigger an action for blocked request.

  RateLimitRuleThreshold:
    Type: Number
    Default: 500
    Description: Threshold for the rate limiting rule

  BlacklistIPAddresses:
    Type: CommaDelimitedList  # Allows a comma-separated list of IP addresses or CIDR ranges
    Description: "Enter the IP addresses or CIDR ranges to block in the WAF IPSet."
    Default: "107.115.17.43/32"  # Example default IPs to block

Resources:


  IPSetBlacklist:
    Type: AWS::WAFv2::IPSet
    Properties:
      Name: BlacklistIPSet
      Scope: REGIONAL  # GLOBAL if used with CloudFront
      IPAddressVersion: IPV4
      Addresses: !Ref BlacklistIPAddresses 
    
      Description: "IP addresses to block"

  WebACL:
    Type: AWS::WAFv2::WebACL
    Properties: 
      DefaultAction: 
        Allow: {}  # Default action for requests not matching any rule.
      Name: EcommerceWAFACL
      Scope: REGIONAL
      VisibilityConfig: 
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: EcommerceWAFACLMetric
      Rules:
      

        - Name: "AWSManagedRulesCommonRuleSet"
          Priority: 0
          Statement:
            ManagedRuleGroupStatement:
              VendorName: "AWS"
              Name: "AWSManagedRulesCommonRuleSet"
              ExcludedRules:  # Exclude specific rule by its rule ID
                - Name: "SizeRestrictions_BODY"
          OverrideAction:
            None: {}  # Do not override, allow the managed rule to block requests
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: "CommonRuleSet"


        - Name: "AWSManagedRulesKnownBadInputsRuleSet"
          Priority: 1
          Statement:
            ManagedRuleGroupStatement:
              VendorName: "AWS"
              Name: "AWSManagedRulesKnownBadInputsRuleSet"
          OverrideAction:
            None: {}  # Do not override, allow the managed rule to block requests
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: "KnownBadInputsRule"

            
        - Name: "AWSManagedRulesSQLiRuleSet"
          Priority: 2
          Statement:
            ManagedRuleGroupStatement:
              VendorName: "AWS"
              Name: "AWSManagedRulesSQLiRuleSet"
          OverrideAction:
            None: {}  # Do not override, allow the managed rule to block requests
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: "SQLInjection-Rule"


        - Name: "AWSManagedRulesPHPRuleSet"
          Priority: 3
          Statement:
            ManagedRuleGroupStatement:
              VendorName: "AWS"
              Name: "AWSManagedRulesPHPRuleSet"
          OverrideAction:
            None: {}  # Do not override, allow the managed rule to block requests
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: "PHPRuleSet"


        - Name: "AWSManagedRulesLinuxRuleSet"
          Priority: 4
          Statement:
            ManagedRuleGroupStatement:
              VendorName: "AWS"
              Name: "AWSManagedRulesLinuxRuleSet"
          OverrideAction:
            None: {}  # Do not override, allow the managed rule to block requests
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: "LinuxRuleSet"


     
        - Name: RateLimitRule
          Action:
            Block: {}
          Priority: 5
          Statement:
            RateBasedStatement:
              Limit: !Ref RateLimitRuleThreshold
              AggregateKeyType: IP
          VisibilityConfig: 
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: RateLimitRuleMetric



        - Name: BlockBadIPsRule
          Action:
            Block: {}
          Priority: 6
          Statement:
            IPSetReferenceStatement:
              Arn: !GetAtt IPSetBlacklist.Arn
          VisibilityConfig: 
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: BlockBadIPsRuleMetric
            # AndStatement:
            #   Statements:
            #     - IPSetReferenceStatement:
            #         Arn: !GetAtt IPSetBlacklist.Arn
            #     - NotStatement:
            #         Statement:
            #           GeoMatchStatement:
            #             CountryCodes:
            #               - US
            #               - CA

        

  WebACLAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn: !Ref LoadBalancerARN
      WebACLArn: !GetAtt WebACL.Arn


  # SNS Topic for CloudWatch Alarm Notifications
  AlarmSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: EcommerceApplicationAlarmNotification

  # Subscription to receive email notifications
  AlarmEmailSubscription:
    Type: AWS::SNS::Subscription
    DependsOn: AlarmSNSTopic  # Ensure SNS Topic is created first
    Properties:
      TopicArn: !Ref AlarmSNSTopic
      Protocol: email  # Notification type: email
      Endpoint: "tarang98@umd.edu"  # Replace with your email address

  # Subscription to receive SMS notifications
  AlarmSMSSubscription:
    Type: AWS::SNS::Subscription
    DependsOn: AlarmSNSTopic  # Ensure SNS Topic is created first
    Properties:
      TopicArn: !Ref AlarmSNSTopic
      Protocol: sms  # Notification type: SMS
      Endpoint: "+15713855625"  # Replace with your phone number





  # CloudWatch Alarm 
  WAFAllowedRequestsAlarm:  
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: WAFAllowedRequestsAlarm
      AlarmDescription: "Alarm when WAF allows requests beyond a threshold"
      MetricName: AllowedRequests
      Namespace: AWS/WAFV2
      Dimensions: 
        - Name: WebACL
          Value: EcommerceWAFACL 
        - Name: "Region"
          Value: !Sub "${AWS::Region}"
        - Name: "Rule"
          Value: "ALL"
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref AllowedRequestAlarmThreshold 
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlarmSNSTopic  # SNS Topic for the alarm actions
      # OKActions:
      #   - !Ref AlarmSNSTopic  # Optional: Sends notification when the alarm is resolved


  WAFBlockedRequestsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: WAFBlockedRequestsAlarm
      MetricName: BlockedRequests
      Namespace: AWS/WAFV2
      Dimensions:
        - Name: WebACL
          Value: EcommerceWAFACL 
        - Name: "Region"
          Value: !Sub "${AWS::Region}"
        - Name: "Rule"
          Value: "ALL"
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref BlockedRequestAlarmThreshold
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlarmSNSTopic  # SNS Topic for the alarm actions



  ## Setting up logging manually
  # WAF Logging Configuration to CloudWatch Logs
  WAFLoggingConfiguration:
    Type: AWS::WAFv2::LoggingConfiguration
    DependsOn: CloudWatchLogGroup  # Ensures that the Log Group is created first

    Properties:
      ResourceArn: !GetAtt WebACL.Arn
      LogDestinationConfigs:
        - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:aws-waf-logs-my-ecommerce-logs


  # CloudWatch Log Group for WAF Logs
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "aws-waf-logs-my-ecommerce-logs"
      RetentionInDays: 30  # Adjust retention as needed

  # Metric Filter to capture WAF blocked requests
  WAFBlockedRequestsMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: "aws-waf-logs-my-ecommerce-logs"
      FilterName : BlockedRequestLogFilter,
      FilterPattern: '{$.action = "BLOCK"}'  # Looks for 'BLOCK' in the logs
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: "Ecommerce/WAFV2"
          MetricName: "BlockedRequests"
         
  # Alarm using the metric created by the filter
  WAFLogBlockedRequestsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "WAFLogBlockedRequestsHigh"
      AlarmDescription: "Alarm when WAF blocks too many requests according to the log generated"
      Namespace: "Ecommerce/WAFV2"  # Using the custom namespace created by the Metric Filter
      MetricName: "BlockedRequests"
      Statistic: Sum
      Period: 300  # 5 minutes (can adjust based on your monitoring needs)
      EvaluationPeriods: 1
      Threshold: !Ref BlockedRequestAlarmThreshold  # Trigger alarm when blocked requests exceed 100 in the given period
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref AlarmSNSTopic  # Sends notification to SNS when the alarm is triggered
      TreatMissingData: notBreaching



Outputs:
  WebACLArn:
    Description: The ARN of the WAF Web ACL
    Value: !GetAtt WebACL.Arn
